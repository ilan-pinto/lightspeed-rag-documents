Troubleshooting Network Observability

To assist in troubleshooting Network Observability issues, you can perform some troubleshooting actions.
Using the must-gather tool
You can use the must-gather tool to collect information about the Network Observability Operator resources and cluster-wide resources, such as pod logs, FlowCollector, and webhook configurations.

Navigate to the directory where you want to store the must-gather data.

Run the following command to collect cluster-wide must-gather resources:
Configuring network traffic menu entry in the "Red Hat OpenShift Container Platform" console
Manually configure the network traffic menu entry in the "Red Hat OpenShift Container Platform" console when the network traffic menu entry is not listed in Observe menu in the "Red Hat OpenShift Container Platform" console.

You have installed "Red Hat OpenShift Container Platform" version 4.10 or newer.


Check if the spec.consolePlugin.register field is set to true by running the following command:

Optional: Add the netobserv-plugin plugin by manually editing the Console Operator config:

Optional: Set the spec.consolePlugin.register field to true by running the following command:

Ensure the status of console pods is running by running the following command:

Restart the console pods by running the following command:

Clear your browser cache and history.

Check the status of Network Observability plugin pods by running the following command:

Check the logs of the Network Observability plugin pods by running the following command:
Flowlogs-Pipeline does not consume network flows after installing Kafka
If you deployed the flow collector first with deploymentModel: KAFKA and then deployed Kafka, the flow collector might not connect correctly to Kafka. Manually restart the flow-pipeline pods where Flowlogs-pipeline does not consume network flows from Kafka.

Delete the flow-pipeline pods to restart them by running the following command:
Failing to see network flows from both br-int and br-ex interfaces
br-ex` and br-int are virtual bridge devices operated at OSI layer 2. The eBPF agent works at the IP and TCP levels, layers 3 and 4 respectively. You can expect that the eBPF agent captures the network traffic passing through br-ex and br-int, when the network traffic is processed by other interfaces such as physical host or virtual pod interfaces. If you restrict the eBPF agent network interfaces to attach only to br-ex and br-int, you do not see any network flow.

Manually remove the part in the interfaces or excludeInterfaces that restricts the network interfaces to br-int and br-ex.

Remove the interfaces: [ 'br-int', 'br-ex' ] field. This allows the agent to fetch information from all the interfaces. Alternatively, you can specify the Layer-3 interface for example, eth0. Run the following command:
Network Observability controller manager pod runs out of memory
You can increase memory limits for the Network Observability operator by patching the Cluster Service Version (CSV), where Network Observability controller manager pod runs out of memory.

Run the following command to patch the CSV:

Run the following command to view the updated CSV:
Troubleshooting Loki ResourceExhausted error
Loki may return a ResourceExhausted error when network flow data sent by Network Observability exceeds the configured maximum message size. If you are using the Loki Operator, this maximum message size is configured to 100 MiB.

Navigate to Operators -> Installed Operators, viewing All projects from the Project drop-down menu.

In the Provided APIs list, select the Network Observability Operator.

Click the Flow Collector then the YAML view tab.

Click Save if you edited the FlowCollector.
Resource troubleshooting

LokiStack rate limit errors
A rate-limit placed on the Loki tenant can result in potential temporary loss of data and a 429 error: Per stream rate limit exceeded (limit:xMB/sec) while attempting to ingest for stream. You might consider having an alert set to notify you of this error. For more information, see "Creating Loki rate limit alerts for the NetObserv dashboard" in the Additional resources of this section.

You can update the LokiStack CRD with the perStreamRateLimit and perStreamRateLimitBurst specifications, as shown in the following procedure.

Navigate to Operators -> Installed Operators, viewing All projects from the Project dropdown.

Look for Loki Operator, and select the LokiStack tab.

Create or edit an existing LokiStack instance using the YAML view to add the perStreamRateLimit and perStreamRateLimitBurst specifications:

Click Save.


Once you update the perStreamRateLimit and perStreamRateLimitBurst specifications, the pods in your cluster restart and the 429 rate-limit error no longer occurs.