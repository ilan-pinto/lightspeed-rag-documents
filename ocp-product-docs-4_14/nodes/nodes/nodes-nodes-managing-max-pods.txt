Managing the maximum number of pods per node

In "Red Hat OpenShift Container Platform", you can configure the number of pods that can run on a node based on the number of processor cores on the node, a hard limit or both. If you use both options, the lower of the two limits the number of pods on a node.

Exceeding these values can result in:

Increased CPU utilization by "Red Hat OpenShift Container Platform".

Slow pod scheduling.

Potential out-of-memory scenarios, depending on the amount of memory in the node.

Exhausting the IP address pool.

Resource overcommitting, leading to poor user application performance.


A pod that is holding a single container actually uses two containers. The second container sets up networking prior to the actual container starting. As a result, a node running 10 pods actually has 20 containers running.
The podsPerCore parameter limits the number of pods the node can run based on the number of processor cores on the node. For example, if podsPerCore is set to 10 on a node with 4 processor cores, the maximum number of pods allowed on the node is 40.

The maxPods parameter limits the number of pods the node can run to a fixed value, regardless of the properties of the node.
Configuring the maximum number of pods per node
Two parameters control the maximum number of pods that can be scheduled to a node: podsPerCore and maxPods. If you use both options, the lower of the two limits the number of pods on a node.

For example, if podsPerCore is set to 10 on a node with 4 processor cores, the maximum number of pods allowed on the node will be 40.

Obtain the label associated with the static MachineConfigPool CRD for the type of node you want to configure by entering the following command:


Create a custom resource (CR) for your configuration change.

Run the following command to create the CR:


List the MachineConfigPool CRDs to see if the change is applied. The UPDATING column reports True if the change is picked up by the Machine Config Controller: