Migrating to Operator SDK v0.1.0

This guide describes how to migrate an Operator project built using Operator SDK v0.0.x to the project structure required by Operator SDK v0.1.0.

The recommended method for migrating your project is to:

Initialize a new v0.1.0 project.

Copy your code into the new project.

Modify the new project as described for v0.1.0.


This guide uses the memcached-operator, the example project from the Operator SDK, to illustrate the migration steps. See the v0.0.7 memcached-operator and v0.1.0 memcached-operator project structures for pre- and post-migration examples, respectively.
Creating a new Operator SDK v0.1.0 project
Rename your Operator SDK v0.0.x project and create a new v0.1.0 project in its place.

Operator SDK v0.1.0 CLI installed on the development workstation

memcached-operator project previously deployed using an earlier version of
Operator SDK


Ensure the SDK version is v0.1.0:

Create a new project:

Copy .git from the old project:
Migrating custom types from pkg/apis
Migrate your project's custom types to the updated Operator SDK v0.1.0 usage.

Operator SDK v0.1.0 CLI installed on the development workstation

memcached-operator project previously deployed using an earlier version of
Operator SDK

New project created using Operator SDK v0.1.0


Create the scaffold API for custom types.

Copy the contents of the type.
Migrating reconcile code
Migrate your project's reconcile code to the update Operator SDK v0.1.0 usage.

Operator SDK v0.1.0 CLI installed on the development workstation

memcached-operator project previously deployed using an earlier version of
Operator SDK

Custom types migrated from pkg/apis/


Add a controller to watch your CR.

Copy and modify reconcile code from pkg/stub/handler.go.

Copy changes from main.go.

Copy user-defined files.

Copy changes to deployment manifests.

Copy user-defined dependencies.

Confirm your changes.