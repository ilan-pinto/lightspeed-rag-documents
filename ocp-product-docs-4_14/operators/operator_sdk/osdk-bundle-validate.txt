Validating Operator bundles

As an Operator author, you can run the bundle validate command in the Operator SDK to validate the content and format of an Operator bundle. You can run the command on a remote Operator bundle image or a local Operator bundle directory.
About the bundle validate command
While the Operator SDK scorecard command can run tests on your Operator based on a configuration file and test images, the bundle validate subcommand can validate local bundle directories and remote bundle images for content and structure.

$ operator-sdk bundle validate <bundle_dir_or_image> <flags>
The bundle validate command runs automatically when you build your bundle using the make bundle command.
Bundle images are pulled from a remote registry and built locally before they are validated. Local bundle directories must contain Operator metadata and manifests. The bundle metadata and manifests must have a structure similar to the following bundle layout:

./bundle
  ├── manifests
  │   ├── cache.my.domain_memcacheds.yaml
  │   └── memcached-operator.clusterserviceversion.yaml
  └── metadata
      └── annotations.yaml
Bundle tests pass validation and finish with an exit code of 0 if no errors are detected.

INFO[0000] All validation tests have completed successfully
Tests fail validation and finish with an exit code of 1 if errors are detected.

ERRO[0000] Error: Value cache.example.com/v1alpha1, Kind=Memcached: CRD "cache.example.com/v1alpha1, Kind=Memcached" is present in bundle "" but not defined in CSV
Bundle tests that result in warnings can still pass validation with an exit code of 0 as long as no errors are detected. Tests only fail on errors.

WARN[0000] Warning: Value : (memcached-operator.v0.0.1) annotations not found
INFO[0000] All validation tests have completed successfully
For further information about the bundle validate subcommand, run:

$ operator-sdk bundle validate -h
Built-in bundle validate tests
The Operator SDK ships with pre-defined validators arranged into suites. If you run the bundle validate command without specifying a validator, the default test runs. The default test verifies that a bundle adheres to the specifications defined by the Operator Framework community. For more information, see "Bundle format".

You can run optional validators to test for issues such as OperatorHub compatibility or deprecated Kubernetes APIs. Optional validators always run in addition to the default test.

$ operator-sdk bundle validate <bundle_dir_or_image>
  --select-optional <test_label>

Bundle format
Running the bundle validate command
The default validator runs a test every time you enter the bundle validate command. You can run optional validators using the --select-optional flag. Optional validators run tests in addition to the default test.

Operator project generated by using the Operator SDK


If you want to run the default validator against a local bundle directory, enter the following command from your Operator project directory:

If you want to run the default validator against a remote Operator bundle image, enter the following command:

If you want to run an additional validator against an Operator bundle, enter the following command:
Validating your Operator's multi-platform readiness
You can validate your Operator's multi-platform readiness by running the bundle validate command. The command verifies that your Operator project meets the following conditions:

Your Operator's manager image supports the platforms labeled in the cluster service version (CSV) file.

Your Operator's CSV has labels for the supported platforms for Operator Lifecycle Manager (OLM) and OperatorHub.


Run the following command to validate your Operator project for multiple architecture readiness:


Configuring Operator projects for multi-platform support