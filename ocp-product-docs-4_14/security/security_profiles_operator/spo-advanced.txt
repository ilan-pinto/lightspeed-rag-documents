Advanced Security Profiles Operator tasks

Use advanced tasks to enable metrics, configure webhooks, or restrict syscalls.
Restrict the allowed syscalls in seccomp profiles
The Security Profiles Operator does not restrict syscalls in seccomp profiles by default. You can define the list of allowed syscalls in the spod configuration.

To define the list of allowedSyscalls, adjust the spec parameter by running the following command:


The Operator will install only the seccomp profiles, which have a subset of syscalls defined into the allowed list. All profiles not complying with this ruleset are rejected.

When the list of allowed syscalls is modified in the spod configuration, the Operator will identify the already installed profiles which are non-compliant and remove them automatically.
Base syscalls for a container runtime
You can use the baseProfileName attribute to establish the minimum required syscalls for a given runtime to start a container.

Edit the SeccompProfile kind object and add baseProfileName: runc-v1.0.0 to the spec field:
Enabling memory optimization in the spod daemon
The controller running inside of spod daemon process watches all pods available in the cluster when profile recording is enabled. This can lead to very high memory usage in large clusters, resulting in the spod daemon running out of memory or crashing.

To prevent crashes, the spod daemon can be configured to only load the pods labeled for profile recording into the cache memory.

+

SPO memory optimization is not enabled by default.
Enable memory optimization by running the following command:

To record a security profile for a pod, the pod must be labeled with spo.x-k8s.io/enable-recording: "true":
Customizing daemon resource requirements
The default resource requirements of the daemon container can be adjusted by using the field daemonResourceRequirements from the spod configuration.

To specify the memory and cpu requests and limits of the daemon container, run the following command:
Setting a custom priority class name for the spod daemon pod
The default priority class name of the spod daemon pod is set to system-node-critical. A custom priority class name can be configured in the spod configuration by setting a value in the priorityClassName field.

Configure the priority class name by running the following command:
Using metrics
The openshift-security-profiles namespace provides metrics endpoints, which are secured by the kube-rbac-proxy container. All metrics are exposed by the metrics service within the openshift-security-profiles namespace.

The Security Profiles Operator includes a cluster role and corresponding binding spo-metrics-client to retrieve the metrics from within the cluster. There are two metrics paths available:

metrics.openshift-security-profiles/metrics: for controller runtime metrics

metrics.openshift-security-profiles/metrics-spod: for the Operator daemon metrics


To view the status of the metrics service, run the following command:

To retrieve the metrics, query the service endpoint using the default ServiceAccount token in the openshift-security-profiles namespace by running the following command:

To retrieve metrics from a different namespace, link the ServiceAccount to the spo-metrics-client ClusterRoleBinding by running the following command:


controller-runtime metrics
The controller-runtime metrics and the DaemonSet endpoint metrics-spod provide a set of default metrics. Additional metrics are provided by the daemon, which are always prefixed with security_profiles_operator_.
Using the log enricher
The Security Profiles Operator contains a log enrichment feature, which is disabled by default. The log enricher container runs with privileged permissions to read the audit logs from the local node. The log enricher runs within the host PID namespace, hostPID.

The log enricher must have permissions to read the host processes.
Patch the spod configuration to enable the log enricher by running the following command:

View the audit logs by running the following command:


Using the log enricher to trace an application
You can use the Security Profiles Operator log enricher to trace an application.

To trace an application, create a SeccompProfile logging profile:

Create a pod object to use the profile:

Examine the log enricher output by running the following command:
Configuring webhooks
Profile binding and profile recording objects can use webhooks. Profile binding and recording object configurations are MutatingWebhookConfiguration CRs, managed by the Security Profiles Operator.

To change the webhook configuration, the spod CR exposes a webhookOptions field that allows modification of the failurePolicy, namespaceSelector, and objectSelector variables. This allows you to set the webhooks to "soft-fail" or restrict them to a subset of a namespaces so that even if the webhooks failed, other namespaces or resources are not affected.

Set the recording.spo.io webhook configuration to record only pods labeled with spo-record=true by creating the following patch file:

Patch the spod/spod instance by running the following command:

To view the resulting MutatingWebhookConfiguration object, run the following command: