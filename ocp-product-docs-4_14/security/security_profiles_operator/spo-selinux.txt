Managing SELinux profiles

Create and manage SELinux profiles and bind them to workloads.

The Security Profiles Operator supports only Red Hat Enterprise Linux CoreOS (RHCOS) worker nodes. Red Hat Enterprise Linux (RHEL) nodes are not supported.
Creating SELinux profiles
Use the SelinuxProfile object to create profiles.

The SelinuxProfile object has several features that allow for better security hardening and readability:

Restricts the profiles to inherit from to the current namespace or a system-wide profile. Because there are typically many profiles installed on the system, but only a subset should be used by cluster workloads, the inheritable system profiles are listed in the spod instance in spec.selinuxOptions.allowedSystemProfiles.

Performs basic validation of the permissions, classes and labels.

Adds a new keyword @self that describes the process using the policy. This allows reusing a policy between workloads and namespaces easily, as the usage of the policy is based on the name and namespace.

Adds features for better security hardening and readability compared to writing a profile directly in the SELinux CIL language.


Create a policy that can be used with a non-privileged workload by creating the following SelinuxProfile object:

Wait for selinuxd to install the policy by running the following command:

Access the pod by running the following command:


View the file contents with cat by running the following command:

Verify that a policy has been installed by running the following command:
Applying SELinux profiles to a pod
Create a pod to apply one of the created profiles.

For SELinux profiles, the namespace must be labelled to allow privileged workloads.

Apply the scc.podSecurityLabelSync=false label to the nginx-deploy namespace by running the following command:

Apply the privileged label to the nginx-deploy namespace by running the following command:

Obtain the SELinux profile usage string by running the following command:

Apply the output string in the workload manifest in the .spec.containers[].securityContext.seLinuxOptions attribute:


Applying SELinux log policies
To log policy violations or AVC denials, set the SElinuxProfile profile to permissive.

This procedure defines logging policies. It does not set enforcement policies.
Add permissive: true to an SElinuxProfile:
Binding workloads to profiles with ProfileBindings
You can use the ProfileBinding resource to bind a security profile to the SecurityContext of a container.

To bind a pod that uses a quay.io/security-profiles-operator/test-nginx-unprivileged:1.21 image to the example SelinuxProfile profile, create a ProfileBinding object in the same namespace with the pod and the SelinuxProfile objects:

Label the namespace with enable-binding=true by running the following command:

Delete and re-create the pod to use the ProfileBinding object:


Confirm the pod inherits the ProfileBinding by running the following command:
Replicating controllers and SecurityContextConstraints
When deploying SELinux policies for replicating controllers, such as deployments or daemon sets, note that the Pod objects spawned by the controllers are not running with the identity of the user who creates the workload. Unless a ServiceAccount is selected, the pods might revert to using a restricted SecurityContextConstraints (SCC) which does not allow use of custom security policies.

Create the following RoleBinding object to allow SELinux policies to be used in the nginx-secure namespace:

Create the Role object:

Create the ServiceAccount object:

Create the Deployment object:


Ensure your SCC is only usable by the correct service account. Refer to Additional resources for more information.
Recording profiles from workloads
The Security Profiles Operator can record system calls with ProfileRecording objects, making it easier to create baseline profiles for applications.

When using the log enricher for recording SELinux profiles, verify the log enricher feature is enabled. See Additional resources for more information.

A container with privileged: true security context restraints prevents log-based recording. Privileged containers are not subject to SELinux policies, and log-based recording makes use of a special SELinux profile to record events.
Label the namespace with enable-recording=true by running the following command:

Create a ProfileRecording object containing a recorder: logs variable:

Create a workload to record:

Confirm the pod is in a Running state by entering the following command:

Confirm the enricher indicates that it receives audit logs for those containers:


Remove the pod:

Confirm the Security Profiles Operator reconciles the two SELinux profiles:


Merging per-container profile instances
By default, each container instance records into a separate profile. The Security Profiles Operator can merge the per-container profiles into a single profile. Merging profiles is useful when deploying applications using ReplicaSet or Deployment objects.

Edit a ProfileRecording object to include a mergeStrategy: containers variable:

Label the namespace by running the following command:

Create the workload with the following YAML:

To record the individual profiles, delete the deployment by running the following command:

To merge the profiles, delete the profile recording by running the following command:

To start the merge operation and generate the results profile, run the following command:

To view the permissions used by any of the containers, run the following command:
About seLinuxContext: RunAsAny
Recording of SELinux policies is implemented with a webhook that injects a special SELinux type to the pods being recorded. The SELinux type makes the pod run in permissive mode, logging all the AVC denials into audit.log. By default, a workload is not allowed to run with a custom SELinux policy, but uses an auto-generated type.

To record a workload, the workload must use a service account that has permissions to use an SCC that allows the webhook to inject the permissive SELinux type. The privileged SCC contains seLinuxContext: RunAsAny.

In addition, the namespace must be labeled with pod-security.kubernetes.io/enforce: privileged if your cluster enables the Pod Security Admission because only the privileged Pod Security Standard allows using a custom SELinux policy.


Managing security context constraints

Managing SCCs in OpenShift

Using the log enricher

About security profiles