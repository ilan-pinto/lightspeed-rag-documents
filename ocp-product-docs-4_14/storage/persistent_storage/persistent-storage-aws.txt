Persistent storage using AWS Elastic Block Store

"Red Hat OpenShift Container Platform" supports Amazon Elastic Block Store (EBS) volumes. You can provision your "Red Hat OpenShift Container Platform" cluster with persistent storage by using Amazon EC2.

The Kubernetes persistent volume framework allows administrators to provision a cluster with persistent storage and gives users a way to request those resources without having any knowledge of the underlying infrastructure. You can dynamically provision Amazon EBS volumes. Persistent volumes are not bound to a single project or namespace; they can be shared across the "Red Hat OpenShift Container Platform" cluster. Persistent volume claims are specific to a project or namespace and can be requested by users. You can define a KMS key to encrypt container-persistent volumes on AWS. By default, newly created clusters using "Red Hat OpenShift Container Platform" version 4.10 and later use gp3 storage and the AWS EBS CSI driver.

High-availability of storage in the infrastructure is left to the underlying storage provider.
For "Red Hat OpenShift Container Platform", automatic migration from AWS EBS in-tree to the Container Storage Interface (CSI) driver is available as a Technology Preview (TP) feature. With migration enabled, volumes provisioned using the existing in-tree driver are automatically migrated to use the AWS EBS CSI driver. For more information, see CSI automatic migration feature.
Creating the EBS storage class
Storage classes are used to differentiate and delineate storage levels and usages. By defining a storage class, users can obtain dynamically provisioned persistent volumes.
Creating the persistent volume claim
Storage must exist in the underlying infrastructure before it can be mounted as a volume in "Red Hat OpenShift Container Platform".

In the "Red Hat OpenShift Container Platform" console, click Storage -> Persistent Volume Claims.

In the persistent volume claims overview, click Create Persistent Volume
Claim.

Define the desired options on the page that appears.

Click Create to create the persistent volume claim and generate a persistent
volume.
Volume format
Before "Red Hat OpenShift Container Platform" mounts the volume and passes it to a container, it checks that the volume contains a file system as specified by the fsType parameter in the persistent volume definition. If the device is not formatted with the file system, all data from the device is erased and the device is automatically formatted with the given file system.

This verification enables you to use unformatted AWS volumes as persistent volumes, because "Red Hat OpenShift Container Platform" formats them before the first use.
Maximum number of EBS volumes on a node
By default, "Red Hat OpenShift Container Platform" supports a maximum of 39 EBS volumes attached to one node. This limit is consistent with the AWS volume limits. The volume limit depends on the instance type.

As a cluster administrator, you must use either in-tree or Container Storage Interface (CSI) volumes and their respective storage classes, but never both volume types at the same time. The maximum attached EBS volume number is counted separately for in-tree and CSI volumes, which means you could have up to 39 EBS volumes of each type.
For information about accessing additional storage options, such as volume snapshots, that are not possible with in-tree volume plug-ins, see AWS Elastic Block Store CSI Driver Operator.
Encrypting container persistent volumes on AWS with a KMS key
Defining a KMS key to encrypt container-persistent volumes on AWS is useful when you have explicit compliance and security guidelines when deploying to AWS.

Underlying infrastructure must contain storage.

You must create a customer KMS key on AWS.


Create a storage class:

Create a persistent volume claim (PVC) with the storage class specifying the KMS key:

Create workload containers to consume the PVC:
Additional resources
See AWS Elastic Block Store CSI Driver Operator for information about accessing additional storage options, such as volume snapshots, that are not possible with in-tree volume plugins.