Scoping tokens

About scoping tokens
You can create scoped tokens to delegate some of your permissions to another user or service account. For example, a project administrator might want to delegate the power to create pods.

A scoped token is a token that identifies as a given user but is limited to certain actions by its scope. Only a user with the cluster-admin role can create scoped tokens.

Scopes are evaluated by converting the set of scopes for a token into a set of PolicyRules. Then, the request is matched against those rules. The request attributes must match at least one of the scope rules to be passed to the "normal" authorizer for further authorization checks.

User scopes
User scopes are focused on getting information about a given user. They are intent-based, so the rules are automatically created for you:

user:full - Allows full read/write access to the API with all of the user's permissions.

user:info - Allows read-only access to information about the user, such as name and groups.

user:check-access - Allows access to self-localsubjectaccessreviews and self-subjectaccessreviews.
These are the variables where you pass an empty user and groups in your request object.

user:list-projects - Allows read-only access to list the projects the user has access to.
Role scope
The role scope allows you to have the same level of access as a given role filtered by namespace.

role:<cluster-role name>:<namespace or * for all> - Limits the scope to the
rules specified by the cluster-role, but only in the specified namespace .

role:<cluster-role name>:<namespace or * for all>:! -  This is similar to the
example above, except that including the bang causes this scope to allow
escalating access.