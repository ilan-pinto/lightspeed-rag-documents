Installing a cluster on AWS with remote workers on AWS Outposts

In "Red Hat OpenShift Container Platform" version {product-version}, you can install a cluster on Amazon Web Services (AWS) with remote workers running in AWS Outposts. This can be achieved by customizing the default AWS installation and performing some manual steps.

For more info about AWS Outposts see AWS Outposts Documentation.

In order to install a cluster with remote workers in AWS Outposts, all worker instances must be located within the same Outpost instance and cannot be located in an AWS region. It is not possible for the cluster to have instances in both AWS Outposts and AWS region. In addition, it also follows that control plane nodes mustn't be schedulable.
Prerequisites
You reviewed details about the "Red Hat OpenShift Container Platform" installation and update processes.

You read the documentation on selecting a cluster installation method and preparing it for users.

You configured an AWS account to host the cluster.

You are familiar with the instance types are supported in the AWS Outpost instance you use. This can be validated with get-outpost-instance-types AWS CLI command

You are familiar with the AWS Outpost instance details, such as OutpostArn and AvailabilityZone. This can be validated with list-outposts AWS CLI command

You have access to an existing Amazon Virtual Private Cloud (VPC) in Amazon Web Services (AWS). See the section "About using a custom VPC" for more information.

If a firewall is used, it was configured to allow the sites that your cluster requires access to.
About using a custom VPC
"Red Hat OpenShift Container Platform" {product-version} installer cannot automatically deploy AWS Subnets on AWS Outposts, so you will need to manually configure the VPC. Therefore, you have to deploy the cluster into existing subnets in an existing Amazon Virtual Private Cloud (VPC) in Amazon Web Services (AWS). In addition, by deploying "Red Hat OpenShift Container Platform" into an existing AWS VPC, you might be able to avoid limit constraints in new accounts or more easily abide by the operational constraints that your company's guidelines set.

Because the installation program cannot know what other components are also in your existing subnets, it cannot choose subnet CIDRs and so forth on your behalf. You must configure networking for the subnets that you install your cluster to yourself.

Requirements for using your VPC
The installation program no longer creates the following components:

Internet gateways

NAT gateways

Subnets

Route tables

VPCs

VPC DHCP options

VPC endpoints


The installation program requires that you use the cloud-provided DNS server. Using a custom DNS server is not supported and causes the installation to fail.
If you use a custom VPC, you must correctly configure it and its subnets for the installation program and the cluster to use. See Amazon VPC console wizard configurations and Work with VPCs and subnets in the AWS documentation for more information on creating and managing an AWS VPC.

The installation program cannot:

Subdivide network ranges for the cluster to use.

Set route tables for the subnets.

Set VPC options like DHCP.


You must complete these tasks before you install the cluster. See VPC networking components and Route tables for your VPC for more information on configuring networking in an AWS VPC.

Your VPC must meet the following characteristics:

To allow the creation of "Red Hat OpenShift Container Platform" with remote workers in the AWS Outposts, you must create at least one private subnet in the AWS Outpost instance for the workload instances creation and one private subnet in an AWS region for the control plane instances creation. If you specify more than one private subnet in the region, the control plane instances will be distributed across these subnets. You will also need to create a public subnet in each of the availability zones used for private subnets, including the Outpost private subnet, as Network Load Balancers will be created in the AWS region for the API server and Ingress network as part of the cluster installation. It is possible to create an AWS region private subnet in the same Availability zone as an Outpost private subnet.
Create a public and private subnet in the AWS Region for each availability zone that your control plane uses. Each availability zone can contain no more than one public and one private subnet in the AWS region. For an example of this type of configuration, see VPC with public and private subnets (NAT) in the AWS documentation.

The VPC's CIDR block must contain the Networking.MachineCIDR range, which is the IP address pool for cluster machines. The subnet CIDR blocks must belong to the machine CIDR that you specify.

The VPC must have a public internet gateway attached to it. For each availability zone:

The VPC must not use the kubernetes.io/cluster/.*: owned, Name, and openshift.io/cluster tags.

You must enable the enableDnsSupport and enableDnsHostnames attributes in your VPC, so that the cluster can use the Route 53 zones that are attached to the VPC to resolve cluster's internal DNS records. See DNS Support in Your VPC in the AWS documentation.



Create a VPC endpoint and attach it to the subnets that the clusters are using. Name the endpoints as follows:

ec2.<aws_region>.amazonaws.com

elasticloadbalancing.<aws_region>.amazonaws.com

s3.<aws_region>.amazonaws.com


With this option, network traffic remains private between your VPC and the required AWS services.


As part of the installation process, you can configure an HTTP or HTTPS proxy. With this option, internet traffic goes through the proxy to reach the required AWS services.


As part of the installation process, you can configure an HTTP or HTTPS proxy with VPC endpoints. Create a VPC endpoint and attach it to the subnets that the clusters are using. Name the endpoints as follows:

ec2.<aws_region>.amazonaws.com

elasticloadbalancing.<aws_region>.amazonaws.com

s3.<aws_region>.amazonaws.com


When configuring the proxy in the install-config.yaml file, add these endpoints to the noProxy field. With this option, the proxy prevents the cluster from accessing the internet directly. However, network traffic remains private between your VPC and the required AWS services.

You must provide a suitable VPC and subnets that allow communication to your machines.
VPC validation
To ensure that the subnets that you provide are suitable, the installation program confirms the following data:

All the subnets that you specify exist.

You provide private subnets.

The subnet CIDRs belong to the machine CIDR that you specified.

You provide subnets for each availability zone. Each availability zone contains exactly one public and one private subnet in the AWS region (not created in the Outpost instance). The availability zone in which the Outpost instance is installed should include one aditional private subnet in the Outpost instance.

You provide a public subnet for each private subnet availability zone. Machines are not provisioned in availability zones that you do not provide private subnets for.


If you destroy a cluster that uses an existing VPC, the VPC is not deleted. When you remove the "Red Hat OpenShift Container Platform" cluster from a VPC, the kubernetes.io/cluster/.*: shared tag is removed from the subnets that it used.
Division of permissions
Starting with "Red Hat OpenShift Container Platform" 4.3, you do not need all of the permissions that are required for an installation program-provisioned infrastructure cluster to deploy a cluster. This change mimics the division of permissions that you might have at your company: some individuals can create different resource in your clouds than others. For example, you might be able to create application-specific items, like instances, buckets, and load balancers, but not networking-related components such as VPCs, subnets, or ingress rules.

The AWS credentials that you use when you create your cluster do not need the networking permissions that are required to make VPCs and core networking components within the VPC, such as subnets, routing tables, internet gateways, NAT, and VPN. You still need permission to make the application resources that the machines within the cluster require, such as ELBs, security groups, S3 buckets, and nodes.
Isolation between clusters
If you deploy "Red Hat OpenShift Container Platform" to an existing network, the isolation of cluster services is reduced in the following ways:

You can install multiple "Red Hat OpenShift Container Platform" clusters in the same VPC.

ICMP ingress is allowed from the entire network.

TCP 22 ingress (SSH) is allowed to the entire network.

Control plane TCP 6443 ingress (Kubernetes API) is allowed to the entire network.

Control plane TCP 22623 ingress (MCS) is allowed to the entire network.
AWS security groups
By default, the installation program creates and attaches security groups to control plane and compute machines. The rules associated with the default security groups cannot be modified.

However, you can apply additional existing AWS security groups, which are associated with your existing VPC, to control plane and compute machines. Applying custom security groups can help you meet the security needs of your organization, in such cases where you need to control the incoming or outgoing traffic of these machines.

As part of the installation process, you apply custom security groups by modifying the install-config.yaml file before deploying the cluster.

For more information, see "Applying existing AWS security groups to the cluster".
Internet access for "Red Hat OpenShift Container Platform"
In "Red Hat OpenShift Container Platform" {product-version}, you require access to the internet to install your cluster.

You must have internet access to:

Access OpenShift Cluster Manager Hybrid Cloud Console to download the installation program and perform subscription management. If the cluster has internet access and you do not disable Telemetry, that service automatically entitles your cluster.

Access Quay.io to obtain the packages that are required to install your cluster.

Obtain the packages that are required to perform cluster updates.
Generating a key pair for cluster node SSH access
During an "Red Hat OpenShift Container Platform" installation, you can provide an SSH public key to the installation program. The key is passed to the Red Hat Enterprise Linux CoreOS (RHCOS) nodes through their Ignition config files and is used to authenticate SSH access to the nodes. The key is added to the ~/.ssh/authorized_keys list for the core user on each node, which enables password-less authentication.

After the key is passed to the nodes, you can use the key pair to SSH in to the RHCOS nodes as the user core. To access the nodes through SSH, the private key identity must be managed by SSH for your local user.

If you want to SSH in to your cluster nodes to perform installation debugging or disaster recovery, you must provide the SSH public key during the installation process. The ./openshift-install gather command also requires the SSH public key to be in place on the cluster nodes.

Do not skip this procedure in production environments, where disaster recovery and debugging is required.
You must use a local key, not one that you configured with platform-specific approaches such as AWS key pairs.
If you do not have an existing SSH key pair on your local machine to use for authentication onto your cluster nodes, create one. For example, on a computer that uses a Linux operating system, run the following command:

View the public SSH key:

Add the SSH private key identity to the SSH agent for your local user, if it has not already been added. SSH agent management of the key is required for password-less SSH authentication onto your cluster nodes, or if you want to use the ./openshift-install gather command.

Add your SSH private key to the ssh-agent:


When you install "Red Hat OpenShift Container Platform", provide the SSH public key to the installation program.
Obtaining the installation program
Before you install "Red Hat OpenShift Container Platform", download the installation file on  the host you are using for installation.

You have a computer that runs Linux or macOS, with 500 MB of local disk space.


Access the Infrastructure Provider page on the OpenShift Cluster Manager site. If you have a Red Hat account, log in with your credentials. If you do not, create an account.

Select your infrastructure provider.

Navigate to the page for your installation type, download the installation program that corresponds with your host operating system and architecture, and place the file in the directory where you will store the installation configuration files.

Extract the installation program. For example, on a computer that uses a Linux
operating system, run the following command:

Download your installation pull secret from the Red Hat OpenShift Cluster Manager. This pull secret allows you to authenticate with the services that are provided by the included authorities, including Quay.io, which serves the container images for "Red Hat OpenShift Container Platform" components.
Minimum resource requirements for cluster installation
Each cluster machine must meet the following minimum requirements:


One vCPU is equivalent to one physical core when simultaneous multithreading (SMT), or hyperthreading, is not enabled. When enabled, use the following formula to calculate the corresponding ratio: (threads per core × cores) × sockets = vCPUs.

"Red Hat OpenShift Container Platform" and Kubernetes are sensitive to disk performance, and faster storage is recommended, particularly for etcd on the control plane nodes which require a 10 ms p99 fsync duration. Note that on many cloud platforms, storage size and IOPS scale together, so you might need to over-allocate storage volume to obtain sufficient performance.

As with all user-provisioned installations, if you choose to use RHEL compute machines in your cluster, you take responsibility for all operating system life cycle management and maintenance, including performing system updates, applying patches, and completing all other required tasks. Use of RHEL 7 compute machines is deprecated and has been removed in "Red Hat OpenShift Container Platform" 4.10 and later.
If an instance type for your platform meets the minimum requirements for cluster machines, it is supported to use in "Red Hat OpenShift Container Platform".

Optimizing storage
Identifying your AWS Outposts instance types
AWS Outposts rack catalog includes options supporting the latest generation Intel powered EC2 instance types with or without local instance storage. Identify which instance types are configured in your AWS Outpost instance. As part of the installation process, you must update the install-config.yaml file with the instance type that the installation program will use to deploy worker nodes.

Use the AWS CLI to get the list of supported instance types by running the following command:

$ aws outposts get-outpost-instance-types --outpost-id <outpost_id> 1
For <outpost_id>, specify the Outpost ID, used in the AWS account for the worker instances


Supported instance types in AWS Outposts might be changed. For more information, you can check the Compute and Storage page in AWS Outposts documents.
Creating the installation configuration file
You can customize the "Red Hat OpenShift Container Platform" cluster you install on Amazon Web Services (AWS).

You have the "Red Hat OpenShift Container Platform" installation program and the pull secret for your cluster.


Create the install-config.yaml file.

Modify the install-config.yaml file. The AWS Outposts installation has the following limitations which require manual modification of the install-config.yaml file:

Back up the install-config.yaml file so that you can use
it to install multiple clusters.


Installation configuration parameters for AWS


Sample customized install-config.yaml file for AWS
You can customize the installation configuration file (install-config.yaml) to specify more details about your "Red Hat OpenShift Container Platform" cluster's platform or modify the values of the required parameters.

This sample YAML file is provided for reference only. You must obtain your install-config.yaml file by using the installation program and modify it.
apiVersion: v1
baseDomain: example.com 1
credentialsMode: Mint 2
controlPlane: 3 4
  hyperthreading: Enabled 5
  name: master
  platform: {}
  replicas: 3
compute: 3
- hyperthreading: Enabled 5
  name: worker
  platform:
    aws:
      type: m5.large 6
      zones:
        - us-east-1a 7
      rootVolume:
        type: gp2 8
        size: 120
  replicas: 3
metadata:
  name: test-cluster 1
networking:
  clusterNetwork:
  - cidr: 10.128.0.0/14
    hostPrefix: 23
  machineNetwork:
  - cidr: 10.0.0.0/16
  networkType: OVNKubernetes 9
  serviceNetwork:
  - 172.30.0.0/16
platform:
  aws:
    region: us-west-2 1
    propagateUserTags: true 3
    userTags:
      adminContact: jdoe
      costCenter: 7536
  subnets: 10
  - subnet-1
  - subnet-2
  - subnet-3
sshKey: ssh-ed25519 AAAA... 11
pullSecret: '{"auths": ...}' 1
Required. The installation program prompts you for this value.

Optional: Add this parameter to force the Cloud Credential Operator (CCO) to use the specified mode. By default, the CCO uses the root credentials in the kube-system namespace to dynamically try to determine the capabilities of the credentials. For details about CCO modes, see the "About the Cloud Credential Operator" section in the Authentication and authorization guide.

If you do not provide these parameters and values, the installation program
provides the default value.

The controlPlane section is a single mapping, but the compute section is a
sequence of mappings. To meet the requirements of the different data structures,
the first line of the compute section must begin with a hyphen, -, and the
first line of the controlPlane section must not. Only one control plane pool is used.

Whether to enable or disable simultaneous multithreading, or
hyperthreading. By default, simultaneous multithreading is enabled
to increase the performance of your machines' cores. You can disable it by
setting the parameter value to Disabled. If you disable simultaneous
multithreading in some cluster machines, you must disable it in all cluster
machines.

For compute instances running in an AWS Outpost instance, specify a supported instance type in the AWS Outpost instance.

For compute instances running in AWS Outpost instance, specify the Availability Zone where the Outpost instance is located.

For compute instances running in AWS Outpost instance, specify volume type gp2, to avoid using gp3 volume type which is not supported.

The cluster network plugin to install. The supported values are OVNKubernetes and OpenShiftSDN. The default value is OVNKubernetes.

If you provide your own VPC, specify subnets for each availability zone that your cluster uses.

You can optionally provide the sshKey value that you use to access the machines in your cluster.
Applying existing AWS security groups to the cluster
Applying existing AWS security groups to your control plane and compute machines can help you meet the security needs of your organization, in such cases where you need to control the incoming or outgoing traffic of these machines.

You have created the security groups in AWS. For more information, see the AWS documentation about working with security groups.

The security groups must be associated with the existing VPC that you are deploying the cluster to. The security groups cannot be associated with another VPC.

You have an existing install-config.yaml file.


In the install-config.yaml file, edit the compute.platform.aws.additionalSecurityGroupIDs parameter to specify one or more custom security groups for your compute machines.

Edit the controlPlane.platform.aws.additionalSecurityGroupIDs parameter to specify one or more custom security groups for your control plane machines.

Save the file and reference it when deploying the cluster.


# ...
compute:
- hyperthreading: Enabled
  name: worker
  platform:
    aws:
      additionalSecurityGroupIDs:
        - sg-1 1
        - sg-2
  replicas: 3
controlPlane:
  hyperthreading: Enabled
  name: master
  platform:
    aws:
      additionalSecurityGroupIDs:
        - sg-3
        - sg-4
  replicas: 3
platform:
  aws:
    region: us-east-1
    subnets: 2
      - subnet-1
      - subnet-2
      - subnet-3
Specify the name of the security group as it appears in the Amazon EC2 console, including the sg prefix.

Specify subnets for each availability zone that your cluster uses.
Generating manifest files
Use the installation program to generate a set of manifest files in the assets directory. Manifest files are required to specify the AWS Outposts subnets to use for worker machines, and to specify settings required by the network provider.

If you plan to reuse the install-config.yaml file, create a backup file before you generate the manifest files.

Optional: Create a backup copy of the install-config.yaml file:

Generate a set of manifests in your assets directory:


Modifying manifest files
The AWS Outposts environments has the following limitations which require manual modification in the manifest generated files:

The maximum transmission unit (MTU) of a network connection is the size, in bytes, of the largest permissible packet that can be passed over the connection. The Outpost service link supports a maximum packet size of 1300 bytes. For more information about the service link, see  Outpost connectivity to AWS Regions


You will find more information about how to change these values below.
Use Outpost Subnet for workers machineset

Specify MTU value for the Network Provider
Installing the OpenShift CLI by downloading the binary
You can install the OpenShift CLI (oc) to interact with "Red Hat OpenShift Container Platform" from a command-line interface. You can install oc on Linux, Windows, or macOS.

If you installed an earlier version of oc, you cannot use it to complete all of the commands in "Red Hat OpenShift Container Platform" {product-version}. Download and install the new version of oc.

You can install the OpenShift CLI (oc) binary on Linux by using the following procedure.

Navigate to the "Red Hat OpenShift Container Platform" downloads page on the Red Hat Customer Portal.

Select the architecture from the Product Variant drop-down list.

Select the appropriate version from the Version drop-down list.

Click Download Now next to the OpenShift v{product-version} Linux Client entry and save the file.

Unpack the archive:

Place the oc binary in a directory that is on your PATH.


After you install the OpenShift CLI, it is available using the oc command:



You can install the OpenShift CLI (oc) binary on Windows by using the following procedure.

Navigate to the "Red Hat OpenShift Container Platform" downloads page on the Red Hat Customer Portal.

Select the appropriate version from the Version drop-down list.

Click Download Now next to the OpenShift v{product-version} Windows Client entry and save the file.

Unzip the archive with a ZIP program.

Move the oc binary to a directory that is on your PATH.


After you install the OpenShift CLI, it is available using the oc command:



You can install the OpenShift CLI (oc) binary on macOS by using the following procedure.

Navigate to the "Red Hat OpenShift Container Platform" downloads page on the Red Hat Customer Portal.

Select the appropriate version from the Version drop-down list.

Click Download Now next to the OpenShift v{product-version} macOS Client entry and save the file.

Unpack and unzip the archive.

Move the oc binary to a directory on your PATH.


After you install the OpenShift CLI, it is available using the oc command:
Alternatives to storing administrator-level secrets in the kube-system project
By default, administrator secrets are stored in the kube-system project. If you configured the credentialsMode parameter in the install-config.yaml file to Manual, you must use one of the following alternatives:

To manage long-term cloud credentials manually, follow the procedure in Manually creating long-term credentials.

To implement short-term credentials that are managed outside the cluster for individual components, follow the procedures in Configuring an AWS cluster to use short-term credentials.


Manually creating long-term credentials
The Cloud Credential Operator (CCO) can be put into manual mode prior to installation in environments where the cloud identity and access management (IAM) APIs are not reachable, or the administrator prefers not to store an administrator-level credential secret in the cluster kube-system namespace.

If you did not set the credentialsMode parameter in the install-config.yaml configuration file to Manual, modify the value as shown:

If you have not previously created installation manifest files, do so by running the following command:

Set a $RELEASE_IMAGE variable with the release image from your installation file by running the following command:

Extract the list of CredentialsRequest custom resources (CRs) from the "Red Hat OpenShift Container Platform" release image by running the following command:

Create YAML files for secrets in the openshift-install manifests directory that you generated previously. The secrets must be stored using the namespace and secret name defined in the spec.secretRef for each CredentialsRequest object.


Before upgrading a cluster that uses manually maintained credentials, you must ensure that the CCO is in an upgradeable state.
Configuring an AWS cluster to use short-term credentials
To install a cluster that is configured to use the AWS Security Token Service (STS), you must configure the CCO utility and create the required AWS resources for your cluster.

Configuring the Cloud Credential Operator utility
To create and manage cloud credentials from outside of the cluster when the Cloud Credential Operator (CCO) is operating in manual mode, extract and prepare the CCO utility (ccoctl) binary.

The ccoctl utility is a Linux binary that must run in a Linux environment.
You have access to an "Red Hat OpenShift Container Platform" account with cluster administrator access.

You have installed the OpenShift CLI (oc).


You have created an AWS account for the ccoctl utility to use with the following permissions:


Obtain the "Red Hat OpenShift Container Platform" release image by running the following command:

Obtain the CCO container image from the "Red Hat OpenShift Container Platform" release image by running the following command:

Extract the ccoctl binary from the CCO container image within the "Red Hat OpenShift Container Platform" release image by running the following command:

Change the permissions to make ccoctl executable by running the following command:


To verify that ccoctl is ready to use, display the help file by running the following command:
Creating AWS resources with the Cloud Credential Operator utility
You have the following options when creating AWS resources:

You can use the ccoctl aws create-all command to create the AWS resources automatically. This is the quickest way to create the resources. See Creating AWS resources with a single command.

If you need to review the JSON files that the ccoctl tool creates before modifying AWS resources, or if the process the ccoctl tool uses to create AWS resources automatically does not meet the requirements of your organization, you can create the AWS resources individually. See Creating AWS resources individually.


Creating AWS resources with a single command
If the process the ccoctl tool uses to create AWS resources automatically meets the requirements of your organization, you can use the ccoctl aws create-all command to automate the creation of AWS resources.

Otherwise, you can create the AWS resources individually. For more information, see "Creating AWS resources individually".

By default, ccoctl creates objects in the directory in which the commands are run. To create the objects in a different directory, use the --output-dir flag. This procedure uses <path_to_ccoctl_output_dir> to refer to this directory.
You must have:

Extracted and prepared the ccoctl binary.


Set a $RELEASE_IMAGE variable with the release image from your installation file by running the following command:

Extract the list of CredentialsRequest objects from the "Red Hat OpenShift Container Platform" release image by running the following command:

Use the ccoctl tool to process all CredentialsRequest objects by running the following command:


To verify that the "Red Hat OpenShift Container Platform" secrets are created, list the files in the <path_to_ccoctl_output_dir>/manifests directory:
Creating AWS resources individually
You can use the ccoctl tool to create AWS resources individually. This option might be useful for an organization that shares the responsibility for creating these resources among different users or departments.

Otherwise, you can use the ccoctl aws create-all command to create the AWS resources automatically. For more information, see "Creating AWS resources with a single command".

By default, ccoctl creates objects in the directory in which the commands are run. To create the objects in a different directory, use the --output-dir flag. This procedure uses <path_to_ccoctl_output_dir> to refer to this directory.

Some ccoctl commands make AWS API calls to create or modify AWS resources. You can use the --dry-run flag to avoid making API calls. Using this flag creates JSON files on the local file system instead. You can review and modify the JSON files and then apply them with the AWS CLI tool using the --cli-input-json parameters.
Extract and prepare the ccoctl binary.


Generate the public and private RSA key files that are used to set up the OpenID Connect provider for the cluster by running the following command:

Create an OpenID Connect identity provider and S3 bucket on AWS by running the following command:

Create IAM roles for each component in the cluster:


To verify that the "Red Hat OpenShift Container Platform" secrets are created, list the files in the <path_to_ccoctl_output_dir>/manifests directory:


You can verify that the IAM roles are created by querying AWS. For more information, refer to AWS documentation on listing IAM roles.
Incorporating the Cloud Credential Operator utility manifests
To implement short-term security credentials managed outside the cluster for individual components, you must move the manifest files that the Cloud Credential Operator utility (ccoctl) created to the correct directories for the installation program.

You have configured an account with the cloud platform that hosts your cluster.

You have configured the Cloud Credential Operator utility (ccoctl).

You have created the cloud provider resources that are required for your cluster with the ccoctl utility.


If you did not set the credentialsMode parameter in the install-config.yaml configuration file to Manual, modify the value as shown:

If you have not previously created installation manifest files, do so by running the following command:

Copy the manifests that the ccoctl utility generated to the manifests directory that the installation program created by running the following command:

Copy the private key that the ccoctl utility generated in the tls directory to the installation directory by running the following command:
Deploying the cluster
You can install "Red Hat OpenShift Container Platform" on a compatible cloud platform.

You can run the create cluster command of the installation program only once, during initial installation.
You have configured an account with the cloud platform that hosts your cluster.

You have the "Red Hat OpenShift Container Platform" installation program and the pull secret for your cluster.

You have verified that the cloud provider account on your host has the correct permissions to deploy the cluster. An account with incorrect permissions causes the installation process to fail with an error message that displays the missing permissions.


Change to the directory that contains the installation program and initialize the cluster deployment:

Optional: Remove or disable the AdministratorAccess policy from the IAM
account that you used to install the cluster.


When the cluster deployment completes successfully:

The terminal displays directions for accessing your cluster, including a link to the web console and credentials for the kubeadmin user.

Credential information also outputs to <installation_directory>/.openshift_install.log.


Do not delete the installation program or the files that the installation program creates. Both are required to delete the cluster.
...
INFO Install complete!
INFO To access the cluster as the system:admin user when using 'oc', run 'export KUBECONFIG=/home/myuser/install_dir/auth/kubeconfig'
INFO Access the OpenShift web-console here: https://console-openshift-console.apps.mycluster.example.com
INFO Login to the console with user: "kubeadmin", and password: "password"
INFO Time elapsed: 36m22s
The Ignition config files that the installation program generates contain certificates that expire after 24 hours, which are then renewed at that time. If the cluster is shut down before renewing the certificates and the cluster is later restarted after the 24 hours have elapsed, the cluster automatically recovers the expired certificates. The exception is that you must manually approve the pending node-bootstrapper certificate signing requests (CSRs) to recover kubelet certificates. See the documentation for Recovering from expired control plane certificates for more information.

It is recommended that you use Ignition config files within 12 hours after they are generated because the 24-hour certificate rotates from 16 to 22 hours after the cluster is installed. By using the Ignition config files within 12 hours, you can avoid installation failure if the certificate update runs during installation.
Logging in to the cluster by using the CLI
You can log in to your cluster as a default system user by exporting the cluster kubeconfig file. The kubeconfig file contains information about the cluster that is used by the CLI to connect a client to the correct cluster and API server. The file is specific to a cluster and is created during "Red Hat OpenShift Container Platform" installation.

You deployed an "Red Hat OpenShift Container Platform" cluster.

You installed the oc CLI.


Export the kubeadmin credentials:

Verify you can run oc commands successfully using the exported configuration:
Logging in to the cluster by using the web console
The kubeadmin user exists by default after an "Red Hat OpenShift Container Platform" installation. You can log in to your cluster as the kubeadmin user by using the "Red Hat OpenShift Container Platform" web console.

You have access to the installation host.

You completed a cluster installation and all cluster Operators are available.


Obtain the password for the kubeadmin user from the kubeadmin-password file on the installation host:

List the "Red Hat OpenShift Container Platform" web console route:

Navigate to the route detailed in the output of the preceding command in a web browser and log in as the kubeadmin user.
Telemetry access for "Red Hat OpenShift Container Platform"
In "Red Hat OpenShift Container Platform" {product-version}, the Telemetry service, which runs by default to provide metrics about cluster health and the success of updates, requires internet access. If your cluster is connected to the internet, Telemetry runs automatically, and your cluster is registered to OpenShift Cluster Manager Hybrid Cloud Console.

After you confirm that your OpenShift Cluster Manager Hybrid Cloud Console inventory is correct, either maintained automatically by Telemetry or manually by using OpenShift Cluster Manager, use subscription watch to track your "Red Hat OpenShift Container Platform" subscriptions at the account or multi-cluster level.

See Accessing the web console for more details about accessing and understanding the "Red Hat OpenShift Container Platform" web console.

See About remote health monitoring for more information about the Telemetry service.
Cluster Limitations
Network Load Balancer (NLB) and Classic Load Balancer are not supported on AWS Outposts. After the cluster is created, all the Load Balancers are created in the AWS region. In order to use Load Balancers created inside the Outpost instances, Application Load Balancer should be used. The AWS Load Balancer Operator can be used in order to achieve that goal.

If you want to use a public subnet located in the outpost instance for the ALB, you need to remove the special tag (kubernetes.io/cluster/.*-outposts: owned) that was added earlier during the VPC creation. This will prevent you from creating new Services of type LoadBalancer (Network Load Balancer).

See Understanding the AWS Load Balancer Operator for more information
Persistent storage using AWS Elastic Block Store limitations

AWS Outposts does not support Amazon Elastic Block Store (EBS) gp3 volumes. After installation, the cluster includes two storage classes - gp3-csi and gp2-csi, with gp3-csi being the default storage class. It is important to always use gp2-csi. You can change the default storage class using the following OpenShift CLI (oc) commands:

To create a Volume in the Outpost instance, the CSI driver determines the Outpost ARN based on the topology keys stored on the CSINode objects. To ensure that the CSI driver uses the correct topology values, it is necessary to use the WaitForConsumer volume binding mode and avoid setting allowed topologies on any new storage class created.
Next steps
Validating an installation.

Customize your cluster.

If necessary, you can opt out of remote health reporting.

If necessary, you can remove cloud provider credentials.