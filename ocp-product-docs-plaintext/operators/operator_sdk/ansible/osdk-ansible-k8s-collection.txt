Kubernetes Collection for Ansible

To manage the lifecycle of your application on Kubernetes using Ansible, you can use the Kubernetes Collection for Ansible. This collection of Ansible modules allows a developer to either leverage their existing Kubernetes resource files written in YAML or express the lifecycle management in native Ansible.

One of the biggest benefits of using Ansible in conjunction with existing Kubernetes resource files is the ability to use Jinja templating so that you can customize resources with the simplicity of a few variables in Ansible.

This section goes into detail on usage of the Kubernetes Collection. To get started, install the collection on your local workstation and test it using a playbook before moving on to using it within an Operator.
Installing the Kubernetes Collection for Ansible
You can install the Kubernetes Collection for Ansible on your local workstation.

Install Ansible 2.15+:

Install the Python Kubernetes client package:

Install the Kubernetes Collection using one of the following methods:
Testing the Kubernetes Collection locally
Operator developers can run the Ansible code from their local machine as opposed to running and rebuilding the Operator each time.

Initialize an Ansible-based Operator project and create an API that has a generated Ansible role by using the Operator SDK

Install the Kubernetes Collection for Ansible


In your Ansible-based Operator project directory, modify the roles/<kind>/tasks/main.yml file with the Ansible logic that you want. The roles/<kind>/ directory is created when you use the --generate-role flag while creating an API. The <kind> replaceable matches the kind that you specified for the API.

Modify the roles/<kind>/defaults/main.yml file to set state to present by default:

Create an Ansible playbook by creating a playbook.yml file in the top-level of your project directory, and include your <kind> role:

Run the playbook:

Verify that the config map was created:

Rerun the playbook setting state to absent:

Verify that the config map was deleted:
Next steps
See Using Ansible inside an Operator for details on triggering your custom Ansible logic inside of an Operator when a custom resource (CR) changes.